// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// rwatTinflex
arma::mat rwatTinflex(int n, double kappa, arma::vec& mu, double cT, double rho);
RcppExport SEXP _watson_rwatTinflex(SEXP nSEXP, SEXP kappaSEXP, SEXP muSEXP, SEXP cTSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type cT(cTSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(rwatTinflex(n, kappa, mu, cT, rho));
    return rcpp_result_gen;
END_RCPP
}
// rwatACG
arma::mat rwatACG(int n, double kappa, arma::vec& mu, double b);
RcppExport SEXP _watson_rwatACG(SEXP nSEXP, SEXP kappaSEXP, SEXP muSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(rwatACG(n, kappa, mu, b));
    return rcpp_result_gen;
END_RCPP
}
// rmwat
NumericMatrix rmwat(int n, arma::vec& weights, arma::vec kappa, arma::mat& mu, String method, double b, double cT, double rho);
RcppExport SEXP _watson_rmwat(SEXP nSEXP, SEXP weightsSEXP, SEXP kappaSEXP, SEXP muSEXP, SEXP methodSEXP, SEXP bSEXP, SEXP cTSEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< String >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type cT(cTSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(rmwat(n, weights, kappa, mu, method, b, cT, rho));
    return rcpp_result_gen;
END_RCPP
}
// g
double g(double alpha, double beta, double x, int N);
RcppExport SEXP _watson_g(SEXP alphaSEXP, SEXP betaSEXP, SEXP xSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(g(alpha, beta, x, N));
    return rcpp_result_gen;
END_RCPP
}
// kummerM
double kummerM(double alpha, double beta, double r);
RcppExport SEXP _watson_kummerM(SEXP alphaSEXP, SEXP betaSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(kummerM(alpha, beta, r));
    return rcpp_result_gen;
END_RCPP
}
// log_hyperg_1F1
double log_hyperg_1F1(double alpha, double beta, double r, int N);
RcppExport SEXP _watson_log_hyperg_1F1(SEXP alphaSEXP, SEXP betaSEXP, SEXP rSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(log_hyperg_1F1(alpha, beta, r, N));
    return rcpp_result_gen;
END_RCPP
}
// diam_clus1
NumericMatrix diam_clus1(arma::mat& data, int K, int maxiter);
RcppExport SEXP _watson_diam_clus1(SEXP dataSEXP, SEXP KSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(diam_clus1(data, K, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// diam_clus2
NumericMatrix diam_clus2(arma::sp_mat& data, int K, int maxiter);
RcppExport SEXP _watson_diam_clus2(SEXP dataSEXP, SEXP KSEXP, SEXP maxiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    rcpp_result_gen = Rcpp::wrap(diam_clus2(data, K, maxiter));
    return rcpp_result_gen;
END_RCPP
}
// predictC1
NumericMatrix predictC1(arma::mat& data, arma::vec& kappa_vector, arma::mat& mu_matrix, arma::rowvec& pi_vector, String E_type, int K);
RcppExport SEXP _watson_predictC1(SEXP dataSEXP, SEXP kappa_vectorSEXP, SEXP mu_matrixSEXP, SEXP pi_vectorSEXP, SEXP E_typeSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type kappa_vector(kappa_vectorSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mu_matrix(mu_matrixSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type pi_vector(pi_vectorSEXP);
    Rcpp::traits::input_parameter< String >::type E_type(E_typeSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(predictC1(data, kappa_vector, mu_matrix, pi_vector, E_type, K));
    return rcpp_result_gen;
END_RCPP
}
// predictC2
NumericMatrix predictC2(arma::sp_mat& data, arma::vec& kappa_vector, arma::mat& mu_matrix, arma::rowvec& pi_vector, String E_type, int K);
RcppExport SEXP _watson_predictC2(SEXP dataSEXP, SEXP kappa_vectorSEXP, SEXP mu_matrixSEXP, SEXP pi_vectorSEXP, SEXP E_typeSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type kappa_vector(kappa_vectorSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mu_matrix(mu_matrixSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type pi_vector(pi_vectorSEXP);
    Rcpp::traits::input_parameter< String >::type E_type(E_typeSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(predictC2(data, kappa_vector, mu_matrix, pi_vector, E_type, K));
    return rcpp_result_gen;
END_RCPP
}
// log_like1
double log_like1(arma::mat& data, const arma::vec& kappa_vector, const arma::mat& mu_matrix, const arma::rowvec& pi_vector, int K, double beta, int n);
RcppExport SEXP _watson_log_like1(SEXP dataSEXP, SEXP kappa_vectorSEXP, SEXP mu_matrixSEXP, SEXP pi_vectorSEXP, SEXP KSEXP, SEXP betaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kappa_vector(kappa_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu_matrix(mu_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type pi_vector(pi_vectorSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(log_like1(data, kappa_vector, mu_matrix, pi_vector, K, beta, n));
    return rcpp_result_gen;
END_RCPP
}
// log_like2
double log_like2(arma::sp_mat& data, const arma::vec& kappa_vector, const arma::mat& mu_matrix, const arma::rowvec& pi_vector, int K, double beta, int n);
RcppExport SEXP _watson_log_like2(SEXP dataSEXP, SEXP kappa_vectorSEXP, SEXP mu_matrixSEXP, SEXP pi_vectorSEXP, SEXP KSEXP, SEXP betaSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type kappa_vector(kappa_vectorSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu_matrix(mu_matrixSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type pi_vector(pi_vectorSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(log_like2(data, kappa_vector, mu_matrix, pi_vector, K, beta, n));
    return rcpp_result_gen;
END_RCPP
}
// EM1
List EM1(arma::mat& data, int K, String E_type, String M_type, double minalpha, bool convergence, int maxiter, int N, double reltol, List start, bool verbose);
RcppExport SEXP _watson_EM1(SEXP dataSEXP, SEXP KSEXP, SEXP E_typeSEXP, SEXP M_typeSEXP, SEXP minalphaSEXP, SEXP convergenceSEXP, SEXP maxiterSEXP, SEXP NSEXP, SEXP reltolSEXP, SEXP startSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< String >::type E_type(E_typeSEXP);
    Rcpp::traits::input_parameter< String >::type M_type(M_typeSEXP);
    Rcpp::traits::input_parameter< double >::type minalpha(minalphaSEXP);
    Rcpp::traits::input_parameter< bool >::type convergence(convergenceSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type reltol(reltolSEXP);
    Rcpp::traits::input_parameter< List >::type start(startSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(EM1(data, K, E_type, M_type, minalpha, convergence, maxiter, N, reltol, start, verbose));
    return rcpp_result_gen;
END_RCPP
}
// EM2
List EM2(arma::sp_mat& data, int K, String E_type, String M_type, double minalpha, bool convergence, int maxiter, int N, double reltol, List start, bool verbose);
RcppExport SEXP _watson_EM2(SEXP dataSEXP, SEXP KSEXP, SEXP E_typeSEXP, SEXP M_typeSEXP, SEXP minalphaSEXP, SEXP convergenceSEXP, SEXP maxiterSEXP, SEXP NSEXP, SEXP reltolSEXP, SEXP startSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< String >::type E_type(E_typeSEXP);
    Rcpp::traits::input_parameter< String >::type M_type(M_typeSEXP);
    Rcpp::traits::input_parameter< double >::type minalpha(minalphaSEXP);
    Rcpp::traits::input_parameter< bool >::type convergence(convergenceSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type reltol(reltolSEXP);
    Rcpp::traits::input_parameter< List >::type start(startSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(EM2(data, K, E_type, M_type, minalpha, convergence, maxiter, N, reltol, start, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_watson_rwatTinflex", (DL_FUNC) &_watson_rwatTinflex, 5},
    {"_watson_rwatACG", (DL_FUNC) &_watson_rwatACG, 4},
    {"_watson_rmwat", (DL_FUNC) &_watson_rmwat, 8},
    {"_watson_g", (DL_FUNC) &_watson_g, 4},
    {"_watson_kummerM", (DL_FUNC) &_watson_kummerM, 3},
    {"_watson_log_hyperg_1F1", (DL_FUNC) &_watson_log_hyperg_1F1, 4},
    {"_watson_diam_clus1", (DL_FUNC) &_watson_diam_clus1, 3},
    {"_watson_diam_clus2", (DL_FUNC) &_watson_diam_clus2, 3},
    {"_watson_predictC1", (DL_FUNC) &_watson_predictC1, 6},
    {"_watson_predictC2", (DL_FUNC) &_watson_predictC2, 6},
    {"_watson_log_like1", (DL_FUNC) &_watson_log_like1, 7},
    {"_watson_log_like2", (DL_FUNC) &_watson_log_like2, 7},
    {"_watson_EM1", (DL_FUNC) &_watson_EM1, 11},
    {"_watson_EM2", (DL_FUNC) &_watson_EM2, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_watson(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
